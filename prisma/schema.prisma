datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

model Cup {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int @unique

  cupTeams CupTeam[]
  cupWeeks CupWeek[]
  cupGames CupGame[]
}

model CupGame {
  id String @id @default(cuid())

  cup Cup @relation(fields: [cupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cupId String

  round String
  roundSort Int
  insideRoundSort Int
  containsBye Boolean @default(false)

  topTeam CupTeam? @relation(name: "TopTeam", fields: [topTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topTeamId String?

  bottomTeam CupTeam? @relation(name: "BottomTeam", fields: [bottomTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bottomTeamId String?

  winningTeam CupTeam? @relation(name: "WinningTeam", fields: [winningTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  winningTeamId String?

  losingTeam CupTeam? @relation(name: "LosingTeam", fields: [losingTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  losingTeamId String?

  winnerToGame CupGame? @relation("WinnerToGame", fields: [winnerToGameId], references: [id])
  winnerToGameId String?
  winnerToTop Boolean @default(true)

  ReferenceGames CupGame[] @relation("WinnerToGame")
}

model CupTeam {
  id String @id @default(cuid())

  cup Cup @relation(fields: [cupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cupId String

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String @unique

  seed Int

  TopTeamGames CupGame[] @relation(name: "TopTeam")
  BottomTeamGames CupGame[] @relation(name: "BottomTeam")
  WinningTeamGames CupGame[] @relation(name: "WinningTeam")
  LosingTeamGames CupGame[] @relation(name: "LosingTeam")

  @@unique([cupId, seed])
}

model CupWeek {
  id String @id @default(cuid())

  cup Cup @relation(fields: [cupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cupId String

  week Int
  mapping String @default("")
}

model DraftPick {
  id String @id @default(cuid())

  pickNumber Int

  Player Player @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playerId String

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String

  @@unique([pickNumber, teamId])
}

model Episode {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  description String
  duration Int
  episode Int
  filepath String
  filesize Int
  filetype String @default("audio/mpeg")
  publishDate DateTime
  season Int
  shownotes String
  title String
}

model FSquaredEntry {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  teams Team[]

  @@unique([year, userId], name: "entryByUserAndYear")
}

model League {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int
  name String
  sleeperLeagueId String @unique
  sleeperDraftId String @unique
  draftDateTime DateTime?
  tier Int

  isActive Boolean
  isDrafted Boolean @default(false)

  teams Team[]
}

model LocksWeek {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int
  weekNumber Int
  isOpen Boolean @default(false)
  isWeekScored Boolean @default(false)

  locksGames LocksGame[]

  @@unique([year, weekNumber], name: "locksYearAndWeek")
}

model LocksGame {
  id String @id @default(cuid())

  game NFLGame @relation(fields: [gameId], references: [id])
  gameId String @unique

  locksWeek LocksWeek? @relation(fields: [locksWeekId], references: [id])
  locksWeekId String?

  locksGamePicks LocksGamePick[]
}

model LocksGamePick {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isScored Boolean? @default(false)
  isWin Int @default(0)
  isTie Int @default(0)
  isLoss Int @default(0)
  isActive Int @default(0)

  teamBet NFLTeam @relation(fields: [teamBetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamBetId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  locksGame LocksGame @relation(fields: [locksGameId], references: [id])
  locksGameId String

  @@unique([userId, locksGameId, teamBetId], name: "locksUserAndGameAndTeam")
}

model NFLGame {
  id String @id @default(cuid())
  sleeperGameId String @unique

  status String
  gameStartTime DateTime
  year Int @default(2022)
  week Int @default(0)

  homeTeam NFLTeam @relation(name: "HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homeTeamId String
  homeTeamScore Int

  awayTeam NFLTeam @relation(name: "AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  awayTeamId String
  awayTeamScore Int

  poolGame PoolGame?
  locksGame LocksGame?
  QBStreamingWeekOption QBStreamingWeekOption[]
}

model NFLTeam {
  id String @id @default(cuid())
  sleeperId String @unique

  name String
  location String
  mascot String
  logo String?

  HomeGames NFLGame[] @relation(name: "HomeTeam")
  AwayGames NFLGame[] @relation(name: "AwayTeam")

  poolBets PoolGamePick[]
  locksPicks LocksGamePick[]
  nflPlayers Player[]
}

model OmniDraftPick {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pickNumber Int
  pickStartTime DateTime?
  pickMadeTime DateTime?

  player OmniPlayer? @relation(fields: [playerId], references: [id])
  playerId String?

  team OmniUserTeam @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String

  @@unique([pickNumber, teamId])
  @@unique([playerId])
}

model OmniSeason {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int
  isCurrent Boolean @default(false)

  hasOvernightPause Boolean @default(false)
  pauseStartHour Int?
  pauseEndHour Int?
  hoursPerPick Int @default(12)

  omniTeams OmniUserTeam[]
  omniSports OmniSport[]
  omniPlayers OmniPlayer[]
  omniSportEvents OmniSportEvent[]
}

model OmniScore {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  player OmniPlayer? @relation(fields: [playerId], references: [id])
  playerId String?

  pointsAdded Int
  isEliminated Boolean
}

model OmniUserTeam {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  season OmniSeason @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  draftPicks OmniDraftPick[]
}

model OmniSport {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  shortName String?
  emoji String?

  omniSeasons OmniSeason[]
  omniPicks OmniPlayer[]
  omniSportEvents OmniSportEvent[]
}

model OmniSportEvent {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sport OmniSport @relation(fields: [sportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sportId String

  season OmniSeason @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId String

  name String

  omniSportEventPoints OmniSportEventPoints[]
}

model OmniSportEventPoints {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event OmniSportEvent @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  player OmniPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playerId String

  points Float
  isComplete Boolean @default(false)
}

model OmniPlayer {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  displayName String
  isActive Boolean @default(true)
  relativeSort Int
  pointsScored Int? @default(0)
  isComplete Boolean @default(false)

  sport OmniSport @relation(fields: [sportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sportId String
  
  season OmniSeason @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId String

  draftPick OmniDraftPick?
  scoringEvents OmniScore[]
  omniSportEvents OmniSportEventPoints[]
}

model PoolWeek {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int
  weekNumber Int
  isOpen Boolean @default(false)
  isWeekScored Boolean @default(false)

  poolGames PoolGame[]
  poolWeeksMissed PoolWeekMissed[]

  @@unique([year, weekNumber], name: "yearAndWeek")
}

model PoolGame {
  id String @id @default(cuid())

  homeSpread Float

  game NFLGame @relation(fields: [gameId], references: [id])
  gameId String @unique

  poolWeek PoolWeek? @relation(fields: [poolWeekId], references: [id])
  poolWeekId String?

  poolGamePicks PoolGamePick[]
}

model PoolWeekMissed {
  id String @id @default(cuid())

  poolWeek PoolWeek? @relation(fields: [poolWeekId], references: [id])
  poolWeekId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  amountBet Int? @default(0)
  resultWonLoss Int? @default(-20)
  isWin Int @default(0)
  isTie Int @default(0)
  isLoss Int @default(0)

  @@unique([userId, poolWeekId], name: "userAndPoolWeek")
}

model PoolGamePick {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amountBet Int
  resultWonLoss Int? @default(0)
  isScored Boolean? @default(false)
  isWin Int @default(0)
  isTie Int @default(0)
  isLoss Int @default(0)

  teamBet NFLTeam @relation(fields: [teamBetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamBetId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  poolGame PoolGame @relation(fields: [poolGameId], references: [id])
  poolGameId String

  @@unique([userId, poolGameId, teamBetId], name: "userAndGameAndTeam")
}

model Player {
  id String @id @default(cuid())

  sleeperId String @unique

  position String?
  firstName String
  lastName String
  fullName String
  nflTeam String?

  currentNFLTeam NFLTeam? @relation(fields: [currentNFLTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currentNFLTeamId String?

  DraftPicks DraftPick[]
  QBStreamingWeekOption QBStreamingWeekOption[]
  TeamGames TeamGame[]
}

model QBStreamingWeek {
  id String @id @default(cuid())

  year Int
  week Int

  isOpen Boolean
  isScored Boolean

  QBSelections QBSelection[]
  QBStreamingWeekOptions QBStreamingWeekOption[]
}

model QBStreamingWeekOption {
  id String @id @default(cuid())

  isDeep Boolean
  pointsScored Float @default(0)

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playerId String

  qbStreamingWeek QBStreamingWeek @relation(fields: [qbStreamingWeekId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  qbStreamingWeekId String

  nflGame NFLGame @relation(fields: [nflGameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nflGameId String

  @@unique([qbStreamingWeekId, playerId], name: "weekIdAndPlayerId")

  StandardQBSelections QBSelection[] @relation(name: "StandardPlayer")
  DeepQBSelections QBSelection[] @relation(name: "DeepPlayer")
}

model QBSelection {
  id String @id @default(cuid())

  qbStreamingWeek QBStreamingWeek @relation(fields: [qbStreamingWeekId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  qbStreamingWeekId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  standardPlayer QBStreamingWeekOption @relation(name: "StandardPlayer", fields: [standardPlayerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  standardPlayerId String

  deepPlayer QBStreamingWeekOption @relation(name: "DeepPlayer", fields: [deepPlayerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deepPlayerId String
}

model Registration {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Season {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  year Int
  isCurrent Boolean
  isOpenForRegistration Boolean
  isOpenForFSquared Boolean @default(false)
  registrationSize Int @default(60)

  Weeks SeasonWeek[]
}

model SeasonWeek {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  season Season  @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId String

  weekNumber Int

  weekStart DateTime
  weekEnd DateTime
}

model SleeperUser {
  sleeperOwnerID String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Team {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wins Int
  ties Int
  losses Int
  sleeperOwnerId String
  pointsFor Float
  pointsAgainst Float
  rosterId Int
  draftPosition Int?

  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  leagueId String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  FSquaredSelections FSquaredEntry[]
  DraftPicks DraftPick[]
  TeamGames TeamGame[]
  CupTeam CupTeam?
}

model TeamGame {
  id String @id @default(cuid())

  sleeperMatchupId Int
  week Int
  isRegularSeason Boolean @default(true)

  pointsScored Float
  starters String[]
  startingPlayers Player[]
  startingPlayerPoints Float[]

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String
}

model User {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discordId String @unique
  discordName String
  discordAvatar String
  discordRoles String[]

  registrations Registration[]
  episodes Episode[]
  teams Team[]
  fSquaredEntries FSquaredEntry[]
  poolGamePicks PoolGamePick[]
  QBSelections QBSelection[]
  poolWeeksMissed PoolWeekMissed[]
  locksGamePick LocksGamePick[]
  sleeperUsers SleeperUser[]
  omniTeams OmniUserTeam[]
}